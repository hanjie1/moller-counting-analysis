// Description of G2P optics

#ifndef ROOT_Input
#define ROOT_Input

#include "TROOT.h"
#include "TMath.h"

using namespace std;
const TString InputID = "GMp_LHRS";

/////////////////////////////////////////////////////////////////////////
// Input Sections
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// HRS Position Inputs
const Double_t D2R = TMath::Pi() / 180.;

//set as central sieve hole angle
const Double_t HRSAngle = 15.005 * D2R; 

// MissPoint* are in HCS
const Double_t MissPointZ = -1.90e-3; //m
const Double_t MissPointY = -1.42e-3; //m

const Double_t BeamShiftX = 0.0;

/////////////////////////////////////////////////////////////////////////
// Sieve Position Inputs
/*
const Double_t SieveYbyCol[] = {3 * .513 * 25.4e-3, 2 * .513 * 25.4e-3, 1 * .513 * 25.4e-3, 0.0, -1 * .513 * 25.4e-3, -2 * .513 * 25.4e-3, -3 * .513 * 25.4e-3, 1e36};
const UInt_t NSieveCol = 7;

const Double_t SieveXbyRow[] = {-3 * 1.025 * 25.4e-3, -2 * 1.025 * 25.4e-3, -1 * 1.025 * 25.4e-3, 0.0, 1 * 1.025 * 25.4e-3,  2 * 1.025 * 25.4e-3, 3 * 1.025 * 25.4e-3, 1e36};
const UInt_t NSieveRow = 7;
*/

const Double_t SieveYbyCol[] = { 2 * .709 * 25.4e-3, 1 * .709 * 25.4e-3, 0.0, -1 * .709 * 25.4e-3, -2 * .709 * 25.4e-3, 1e36};
const UInt_t NSieveCol = 5; 

const Double_t SieveXbyRow[] = { -2 * 1.417 * 25.4e-3, -1 * 1.417 * 25.4e-3, 0.0, 1 * 1.417 * 25.4e-3,  2 * 1.417 * 25.4e-3, 1e36};
const UInt_t NSieveRow = 5; 

// SieveOff* are in TCS
const Double_t SieveOffY = 3.61e-3; //(2.97*cos(HRSAngle)).check
const Double_t SieveOffX = .0; 
const Double_t ZPos = 1003.34 * 1e-3; 

/////////////////////////////////////////////////////////////////////////
// Vertex Position Inputs
/*
static const UInt_t NFoils = 5; 
const Double_t targetfoils[] = {0.0019-0.2, 0.0019-0.2+0.2/3., 0.0019-0.2+0.2/3.*2., 0.0019,0.0019+0.2/3., 0.0019+0.2/3.*2., +0.0019+0.2, 1e36};
*/

static const UInt_t NFoils = 1; 
const Double_t targetfoils[] = {0.23, 1e36};

/* ///////////////////////////////////////////////////////////////////////// */
/* // Excitation State Inputs */
/* const UInt_t NKine = 5; //N Delta Scans */

/* #define DIPOLE_MAG2MOM(Mag) (2.702*(Mag)-1.6e-03*(Mag)*(Mag)*(Mag)) */
/* const Double_t HRSCentralMom[] = { */
/*     DIPOLE_MAG2MOM((0.8580545 + 0.8580571) / 2.), // -3% run 5592 5591 */
/*     DIPOLE_MAG2MOM((0.8413956 + 0.8413937) / 2.), // -1% run 5594 5593 */
/*     DIPOLE_MAG2MOM((0.8328684 + 0.8328685) / 2.), //  0% run 5585 5582 */
/*     DIPOLE_MAG2MOM((0.8243780 + 0.8243814) / 2.), //  1% run 5588 5586 */
/*     DIPOLE_MAG2MOM((0.8077295 + 0.8077288) / 2.), //  3% run 5590 5589 */
/*     0 */
/* }; */

/////////////////////////////////////////////////////////////////////////
// Excitation State Inputs
const UInt_t NKine = 1; //N Delta Scans

#define DIPOLE_MAG2MOM(Mag) (2.702*(Mag)-1.6e-03*(Mag)*(Mag)*(Mag))
const Double_t HRSCentralMom[] = {
    DIPOLE_MAG2MOM(1.11085), // 0% 1407
    0
};


const Double_t GroundNuclearMass = 12*.931494028-.511e-3*6; //GeV/c^2  //Carbon Target
const Double_t ExcitationEnergy[] = //selected excitation states for each kinematics
  {0.};
//{0.,0.00443891,0.00443891,0.00443891,0.00443891};

const UInt_t NExcitationStates = 1; // C Excitation States
const Double_t ExcitationEnergyList[] = {0};

/* const UInt_t NExcitationStates = 8; //C Excitation States */
/* const Double_t ExcitationEnergyList[] */
/* ={0,0.00443891,0.00765420,0.009641,0.010844,0.011160,0.011828,0.012710}; */

/////////////////////////////////////////////////////////////////////////
// Radiation Loss Inputs

// g2p straight through
/* const Double_t AllLossExceptFoil */
/*         = 1.e-3 * (//in MeV */
/*         // 0.870100332 */
/*         1.0 */
/*         ); */
const Double_t AllLossExceptFoil
        = 1e-3*(//in MeV
        0.0895//Be Window
        +0.4299//BeO
        +4.7435E-04*(51.6+70.1548)//He4 in target enclosure
        +.1//target enclosure
        +3.2433E-03*(116.078-70.1548)//air, Target Enclosure to HRS
        +0.0798//HRS Entrance
        );
const Double_t LossEachFoil = 0.1072e-3; // 0.27mm C12

// Array of FoilID
/*
const Double_t RadiationLossByFoil[] = {
    AllLossExceptFoil + LossEachFoil * 1,
    AllLossExceptFoil + LossEachFoil * 2,
    AllLossExceptFoil + LossEachFoil * 3,
    AllLossExceptFoil + LossEachFoil * 4,
    AllLossExceptFoil + LossEachFoil * 5,
    AllLossExceptFoil + LossEachFoil * 6,
    AllLossExceptFoil + LossEachFoil * 7,
    0
    };
*/
const Double_t RadiationLossByFoil[] = {
    AllLossExceptFoil + LossEachFoil * 1,
    0
};
// Warning: these numbers are calculated with small angle approximation

/////////////////////////////////////////////////////////////////////////
// Disable Extended Target Correction

const Double_t ExtTarCor_ThetaCorr = 0.61;
const Double_t ExtTarCor_DeltaCorr = 5.18;

/////////////////////////////////////////////////////////////////////////
// Database header

const char * Prefix = "L.vdc.";

const char * DatabaseHeader = "\
[ L.global ]   \n\
0.3327 1 0.0 270.2 0.0 -1.6e-03        VDC Angle, Plane Spacing, Gamma Coefficents  \n\
matrix elements   \n\
t 0 0 0  -1.001135e+00 -3.313373e-01 -4.290819e-02  4.470852e-03  0.000000e+00  0.000000e+00  0.000000e+00  0\n\
y 0 0 0  -8.060915e-03  1.071977e-03  9.019102e-04 -3.239615e-04  0.000000e+00  0.000000e+00  0.000000e+00  0\n\
p 0 0 0  -2.861912e-03 -2.469069e-03  8.427172e-03  2.274635e-03  0.000000e+00  0.000000e+00  0.000000e+00  0\n\
";

const char * DatabaseFooter = "\
L 0 0 0 0  25.713\n\
L 1 0 0 0  0.1650\n\
L 2 0 0 0 -0.05\n\
L 0 1 0 0 -11.6554\n\
L 0 2 0 0 -9.4951\n\
L 0 0 1 0  0.0\n\
L 0 0 2 0  0.0\n\
L 0 0 0 1  0.0\n\
L 0 0 0 2  0.0\n\
XF 1 0 0 0 0 -2.181E+00\n\
XF 0 1 0 0 0 -1.980E-01\n\
XF 0 0 0 0 1  1.191E+01\n\
TF 1 0 0 0 0 -1.000E-01\n\
TF 0 1 0 0 0 -4.690E-01\n\
TF 0 0 0 0 1  1.967E+00\n\
PF 0 0 1 0 0  3.630E-01\n\
PF 0 0 0 1 0 -0.902E+00\n\
YF 0 0 1 0 0 -5.950E-01\n\
YF 0 0 0 1 0 -1.274E+00\n\
";
/////////////////////////////////////////////////////////////////////////

#endif
